type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: |+
    package tictactoe;
    import java.lang.reflect.Array;
    import java.util.*;
    import java.util.InputMismatchException;

    public class Board {
            char[][] board = {
                                {' ',' ',' '},
                                {' ',' ',' '},
                                {' ',' ',' '}
                            };
        public void printTable(){
            System.out.println("_________");
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[i].length; j++) {
                    if(j==0){
                        System.out.print("| ");
                    }
                    System.out.print(board[i][j] + " ");
                    if(j== board.length-1){
                        System.out.println("|");
                    }
                }
            }
            System.out.println("_________");
        }
        public void enterCoords(){
            Scanner scanner = new Scanner(System.in);
            boolean validInput = true;
            int coord1;
            int coord2;
            do{
                System.out.print("Enter the coordinates: ");
                try{
                    coord1 = scanner.nextInt();
                    coord2 = scanner.nextInt();
                    if (coord1 > 3 || coord2 > 3 || coord2 < 1 || coord1 < 1){
                        System.out.println("Coordinates should be from 1 to 3!");
                    }else{
                        if(board[coord1-1][coord2-1] != ' '){
                            System.out.println("This cell is occupied! Choose another one!");
                        }else{
                            board[coord1-1][coord2-1] = 'X';
                            validInput = false;
                        }
                    }
                }catch (InputMismatchException e){
                    System.out.println("You should enter numbers!");
                    scanner.nextLine();

                }
            }while (validInput);
        }
        public void nextTurn(){
            boolean found = false;
            Random random1 = new Random();
            int pos1 = random1.nextInt(3);
            int pos2 = random1.nextInt(3);

            while (board[pos1][pos2] != ' '){
                pos1 = random1.nextInt(3);
                pos2 = random1.nextInt(3);
            }
            board[pos1][pos2] = 'O';



              /*  for(int i=0; i<3; i++){

                    for(int j=0; j<3; j++){
                        if (board[i][j]==' ') {
                            found = true;
                            board[i][j] = 'O';
                            break;
                        }
                    }
                    if(found){break;}
                }*/

        }

        public void playGame(){




            while (true){
                char win = winner();
                if(win == 'O' || win=='X') {
                    printTable();
                    System.out.println(win+" wins");
                    break;
                }
                printTable();
                enterCoords();
                printTable();
                System.out.println(" Making move level "+'"'+ "easy"+'"');
                nextTurn();

            }


        }

        public char winner(){
            for (int i = 0; i < 3; i++) {
                if (board[i][0] == board[i][1] &&
                        board[i][1] == board[i][2] &&
                        board[i][0] != '-') {
                    return board[i][0];
                }
            }

            for (int j = 0; j < 3; j++) {
                if (board[0][j] == board[1][j] &&
                        board[1][j] == board[2][j] &&
                        board[0][j] != '-') {
                    return board[0][j];
                }
            }

            if (board[0][0] == board[1][1] &&
                    board[1][1] == board[2][2] &&
                    board[0][0] != '-') {
                return board[0][0];
            }

            if (board[2][0] == board[1][1] &&
                    board[1][1] == board[0][2] &&
                    board[2][0] != '-') {
                return board[2][0];
            }

            return ' ';
        }


    }


  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7436#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 13 Dec 2022 00:53:09 UTC"
record: 3
