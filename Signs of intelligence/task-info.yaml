type: edu
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: "package tictactoe;\nimport java.lang.reflect.Array;\nimport java.util.*;\n\
    import java.util.InputMismatchException;\n\npublic class Board {\n\n\n       \
    \ private char[][] board = {\n                            {' ',' ',' '},\n   \
    \                         {' ',' ',' '},\n                            {' ',' ','\
    \ '}\n                        };\n    private void printTable(){\n        System.out.println(\"\
    _________\");\n        for (int i = 0; i < board.length; i++) {\n            for\
    \ (int j = 0; j < board[i].length; j++) {\n                if(j==0){\n       \
    \             System.out.print(\"| \");\n                }\n                System.out.print(board[i][j]\
    \ + \" \");\n                if(j== board.length-1){\n                    System.out.println(\"\
    |\");\n                }\n            }\n        }\n        System.out.println(\"\
    _________\");\n    }\n    private void enterCoords(int mode){\n        Scanner\
    \ scanner = new Scanner(System.in);\n        boolean validInput = true;\n    \
    \    int coord1;\n        int coord2;\n        do{\n            System.out.print(\"\
    Enter the coordinates: \");\n            try{\n                coord1 = scanner.nextInt();\n\
    \                coord2 = scanner.nextInt();\n                if (coord1 > 3 ||\
    \ coord2 > 3 || coord2 < 1 || coord1 < 1){\n                    System.out.println(\"\
    Coordinates should be from 1 to 3!\");\n                }else{\n             \
    \       if(board[coord1-1][coord2-1] != ' '){\n                        System.out.println(\"\
    This cell is occupied! Choose another one!\");\n                    }else{\n \
    \                       if(mode == 3){\n                            board[coord1-1][coord2-1]\
    \ = 'O';\n                            validInput = false;\n                  \
    \      } else if (mode == 4) {\n                            board[coord1-1][coord2-1]\
    \ = 'X';\n                            validInput = false;\n                  \
    \      } else{\n                            board[coord1-1][coord2-1] = getTurn();\n\
    \                            validInput = false;\n                        }\n\n\
    \                    }\n                }\n            }catch (InputMismatchException\
    \ e){\n                System.out.println(\"You should enter numbers!\");\n  \
    \              scanner.nextLine();\n\n            }\n        }while (validInput);\n\
    \    }\n    private void nextTurn(int mode){\n     \n        Random random1 =\
    \ new Random();\n        int pos1 = random1.nextInt(3);\n        int pos2 = random1.nextInt(3);\n\
    \n        while (board[pos1][pos2] != ' '){\n            pos1 = random1.nextInt(3);\n\
    \            pos2 = random1.nextInt(3);\n        }\n        switch (mode){\n \
    \           case 1:\n                board[pos1][pos2] = getTurn();\n        \
    \        break;\n            case 2:\n                break;\n            case\
    \ 3:\n                board[pos1][pos2] = 'X';\n                break;\n     \
    \       case 4:\n                board[pos1][pos2] = 'O';\n                break;\n\
    \        }\n\n\n    }\n    private char getTurn(){\n        int contX=0;\n   \
    \     int contO = 0;\n        for (int i = 0; i < board.length; i++) {\n     \
    \       for (int j = 0; j < board[i].length; j++) {\n                if(board[i][j]\
    \ == 'X'){\n                    contX++;\n                } else if (board[i][j]\
    \ == 'O') {\n                    contO++;\n                }\n            }\n\
    \        }\n        if(contX > contO){\n            return('O');\n        }else{\n\
    \            return ('X');\n        }\n    }\n\n    public void playGame(int mode){\n\
    \        while (true){\n            char win = winner();\n            if(win ==\
    \ 'O' || win=='X') {\n                printTable();\n                System.out.println(win+\"\
    \ wins\");\n                break;\n            }\n            printTable();\n\
    \            switch (mode){\n                //case 1 ai vs ai\n             \
    \   case 1:\n                    System.out.println(\" Making move level \"+'\"\
    '+ \"easy\"+'\"');\n                    nextTurn(mode);\n                    break;\n\
    \                case 2:\n                    enterCoords(mode);\n           \
    \         break;\n                case 3:\n                    System.out.println(\"\
    \ Making move level \"+'\"'+ \"easy\"+'\"');\n                    nextTurn(mode);\n\
    \                    printTable();\n                    enterCoords(mode);\n \
    \                   printTable();break;\n                case 4:\n           \
    \         enterCoords(mode);\n                    printTable();\n            \
    \        System.out.println(\" Making move level \"+'\"'+ \"easy\"+'\"');\n  \
    \                  nextTurn(mode);\n\n                    break;\n           \
    \ }\n            /*\n            enterCoords();\n            printTable();\n \
    \           System.out.println(\" Making move level \"+'\"'+ \"easy\"+'\"');\n\
    \            nextTurn();*/\n        }\n    }\n\n    private char winner(){\n \
    \       for (int i = 0; i < 3; i++) {\n            if (board[i][0] == board[i][1]\
    \ &&\n                    board[i][1] == board[i][2] &&\n                    board[i][0]\
    \ != '-') {\n                return board[i][0];\n            }\n        }\n\n\
    \        for (int j = 0; j < 3; j++) {\n            if (board[0][j] == board[1][j]\
    \ &&\n                    board[1][j] == board[2][j] &&\n                    board[0][j]\
    \ != '-') {\n                return board[0][j];\n            }\n        }\n\n\
    \        if (board[0][0] == board[1][1] &&\n                board[1][1] == board[2][2]\
    \ &&\n                board[0][0] != '-') {\n            return board[0][0];\n\
    \        }\n\n        if (board[2][0] == board[1][1] &&\n                board[1][1]\
    \ == board[0][2] &&\n                board[2][0] != '-') {\n            return\
    \ board[2][0];\n        }\n\n        return ' ';\n    }\n\n\n}\n\n\n"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7437#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 14 Dec 2022 23:44:32 UTC"
record: 4
